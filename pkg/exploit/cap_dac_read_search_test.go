// +build linux,!no_cap_dac_read_search
package exploit

import (
	"fmt"
	"strings"
	"testing"
)

func TestWriteString(t *testing.T) {

	var (
		defaultRef    = "/etc/hostname"
		defaultTarget = "/etc/shadow"
		defaultShell  = "/bin/bash"
	)

	var buffer strings.Builder

	buffer.WriteString("Read files from host or chroot to host and spawn a cmd. ")
	buffer.WriteString("The First argument is file bind-mounted to container from host (default: %s), ")
	buffer.WriteString("the second argument specifies which file to read (default: %s), ")
	buffer.WriteString("the third and remaining arguments specifies command executed in host root filesystem (default: %s). ")
	buffer.WriteString("If there is one argument, the first argument is the target file to read. ")
	buffer.WriteString("When second argument is \"/\", this exploit will spawn a cmd. ")

	fmt.Println(fmt.Sprintf(buffer.String(), defaultRef, defaultTarget, defaultShell))
	exploit := CapDacReadSearch{}
	fmt.Println(exploit.Desc())

}
